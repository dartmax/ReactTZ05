{"version":3,"sources":["components/Autocomplete/index.jsx","store/InjectReducer.js","redux/actions.js","redux/types.js","redux/selectors.js","pages/HomePage/index.jsx","redux/reducers/autocompleteReducer.js","store/InitialState.js","redux/reducers/index.js","utils/mockData.js","utils/Client.js","sagas/autocomplete.js","sagas/index.js","App.tsx","store/configureStore.js","serviceWorker.ts","index.tsx"],"names":["listToAvatar","isoCode","String","fromCodePoint","toUpperCase","replace","char","charCodeAt","initialState","handlers","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","alignItems","paper","padding","maxWidth","display","flexWrap","option","fontSize","marginRight","AutocompleteComponent","list","classes","useForm","control","handleSubmit","useState","value","setValue","selectedList","setSelectedList","addToFavorites","id","name","avatar","author","firstName","lastName","className","Paper","container","onSubmit","event","Grid","Autocomplete","style","width","options","onInputChange","newInputValue","onChange","newValue","autoHighlight","getOptionLabel","renderOption","Avatar","renderInput","params","TextField","label","variant","inputProps","autoComplete","CardActions","Button","color","type","map","items","index","key","onClick","filter","newList","getData","createActions","dataSelector","state","autocompleteReducer","connect","dispatch","bindActionCreators","useEffect","injectReducer","isRequest","error","payload","action","hasOwnProperty","rootReducer","combineReducers","ArticlesFromUrl","JSON","stringify","status","total","getDataFromApi","response","parse","call","put","all","takeLatest","fork","autocomplete","store","sagaMiddleware","createSagaMiddleware","createStore","reducer","applyMiddleware","runSaga","run","configureStore","rootSaga","subscribe","getState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6aefc34a.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport './styles/style.css'\nimport {makeStyles} from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from \"@material-ui/core/Button\";\nimport {useForm} from \"react-hook-form\";\nimport {CardActions, Grid} from \"@material-ui/core\";\nimport Avatar from '@material-ui/core/Avatar';\n\nfunction listToAvatar(isoCode) {\n  return typeof String.fromCodePoint !== 'undefined'\n    ? isoCode\n      .toUpperCase()\n      .replace(/./g, (char) => String.fromCodePoint(char.charCodeAt(0) + 127397))\n    : isoCode;\n}\n\nconst useStyles = makeStyles((theme) =>({\n  root: {\n    flexGrow: 1,\n    margin: theme.spacing(10),\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: 'auto',\n    maxWidth: 500,\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  option: {\n    fontSize: 15,\n    '& > span': {\n      marginRight: 10,\n      fontSize: 18,\n    },\n  },\n}));\n\nconst AutocompleteComponent = ({\n  list,\n}) => {\n  const classes = useStyles();\n  const { control, handleSubmit } = useForm();\n  const [value, setValue] = useState('');\n  let [selectedList, setSelectedList] = useState([]);\n\n\n  const addToFavorites = () => {\n    if(value){\n      setSelectedList(selectedList = [\n        {\n          id: value.id,\n          name: value.name,\n          avatar: value.avatar,\n          author: {\n            avatar: value.author.avatar,\n            firstName: value.author.firstName,\n            lastName: value.author.lastName,\n          },\n        }]\n      )\n    }\n  };\n\n  const removeFromFavorites = (id) => {\n    return setSelectedList([...selectedList.filter((newList) => newList.id !== id)])\n  };\n\n  const onSubmit = (event, value) => {\n    return addToFavorites(value)\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper container spacing={4}>\n        <form onSubmit={handleSubmit(onSubmit)} >\n          <Grid>\n            <Autocomplete\n              id=\"list-select-demo\"\n              style={{width: 300}}\n              options={list}\n              control={control}\n              onInputChange={(event, newInputValue) => {\n                setValue(newInputValue);\n              }}\n              classes={{\n                option: classes.option,\n              }}\n              onChange={(event, newValue) => {\n                setValue(newValue);\n              }}\n              autoHighlight\n              getOptionLabel={(option) => option.name}\n              renderOption={(option) => (\n                <Fragment>\n                  <Avatar>{listToAvatar(option.avatar)}</Avatar>\n                  {option.name} <Avatar>{listToAvatar(option.author.avatar)}</Avatar> {option.author.firstName} {option.author.lastName}\n                </Fragment>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  style={{width: '350px'}}\n                  label=\"Choose a article\"\n                  variant=\"outlined\"\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'new-article',\n                  }}\n                />\n              )}\n            />\n          </Grid>\n          <CardActions>\n              <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n              Submit\n            </Button>\n          </CardActions>\n        </form>\n      </Paper>\n      <div>My favorite:</div>\n      {selectedList.map((items, index) => {\n        return (\n          <Paper key={index} className=\"item-list\">\n            <div className={\"item-text\"}>\n              <div>\n                <Avatar>{listToAvatar(items.avatar)}</Avatar>\n                {items.name} <Avatar>{listToAvatar(items.author.avatar)}</Avatar> {items.author.firstName} {items.author.lastName}\n              </div>\n            </div>\n            <div className=\"item-delete\" onClick={() => removeFromFavorites(items.id)}>\n              X\n            </div>\n          </Paper>\n        )\n      })}\n    </div>\n  );\n};\n\nexport default AutocompleteComponent;","export default (initialState, handlers) => (\n  state = initialState,\n  action = {},\n) =>\n  action.hasOwnProperty('type')\n    ? handlers[action.type]\n    ? handlers[action.type](state, action)\n    : state\n    : state;\n","import {createActions} from 'redux-actions';\n\nimport {GET_DATA} from './types';\n\nexport const {getData} = createActions({\n  [GET_DATA]: (list) => ({list}),\n});\n","export const GET_DATA = \"GET_DATA\"\nexport const GET_DATA_SUCCESS = \"GET_DATA_SUCCESS\"\nexport const GET_DATA_FAILURE = \"GET_DATA_FAILURE\"\n","export const dataSelector = state => state.autocompleteReducer.list;","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {AutocompleteComponent} from \"../../components\";\nimport {getData} from \"../../redux/actions\";\nimport {dataSelector} from \"../../redux/selectors\";\n\nconst HomePage = ({\n  getData,\n  list\n}) => {\n  useEffect(() => {\n    getData();\n  }, [getData])\n\n  return (\n    <div>\n      <AutocompleteComponent\n        list={list} />\n    </div>\n\n  );\n}\n\nconst mapStateToProps = state => ({\n  list: dataSelector(state),\n});\n\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      getData\n    },\n    dispatch,\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(HomePage)","import initialState from '../../store/InitialState';\nimport injectReducer from '../../store/InjectReducer';\n\nimport {GET_DATA, GET_DATA_SUCCESS, GET_DATA_FAILURE} from '../types';\n\nexport default injectReducer(initialState, {\n  // Get data from API\n  [GET_DATA]: state => ({\n    ...state,\n    list: [],\n    isRequest: true,\n    error: null\n  }),\n  [GET_DATA_SUCCESS]: (state, {payload}) => ({\n    ...state,\n    list: payload,\n    isRequest: false,\n    error: null\n  }),\n  [GET_DATA_FAILURE]: (state, {payload}) => ({\n    ...state,\n    list: [],\n    isRequest: false,\n    error: payload\n  }),\n});\n","export default {\n  isRequest : false,\n  list: [],\n  error: null,\n};\n","import {combineReducers} from 'redux';\nimport autocompleteReducer from './autocompleteReducer';\n\n\nconst rootReducer = combineReducers({\n  autocompleteReducer\n});\n\nexport default rootReducer;\n","export const ArticlesFromUrl = JSON.stringify({\n  status: 200,\n  list: [{\n    id: 'id-1',\n    name: 'Article-1',\n    avatar: 'AD',\n    author: {\n      firstName: 'FName',\n      lastName: 'LName',\n      avatar: 'AR',\n    },\n  },\n    {\n      id: 'id-2',\n      name: 'Article-2',\n      avatar: 'AM',\n      author: {\n        firstName: 'Astra',\n        lastName: 'Zeneca',\n        avatar: 'AO',\n      },\n    },\n    {\n      id: 'id-3',\n      name: 'Bill List 3',\n      avatar: 'AL',\n      author: {\n        firstName: 'Bill',\n        lastName: 'Gardner',\n        avatar: 'AI',\n      },\n    },\n  ],\n  total: 1\n})\n\n","import {ArticlesFromUrl} from \"./mockData\";\n\nexport function getDataFromApi() {\n   let response = JSON.parse(ArticlesFromUrl)\n      if (response.status >= 400) {\n        throw response;\n      }\n      return response.list;\n}\n","import {all, takeLatest, call, put} from 'redux-saga/effects';\n\nimport {getDataFromApi} from '../utils/Client';\nimport {GET_DATA, GET_DATA_FAILURE, GET_DATA_SUCCESS} from \"../redux/types\";\n\nexport function* getData() {\n  try {\n    const response = yield call(getDataFromApi);\n    yield put({\n      type: GET_DATA_SUCCESS,\n      payload: response,\n    });\n  } catch (err) {\n    yield put({\n      type: GET_DATA_FAILURE,\n      payload: err.response,\n    });\n\n  }\n}\n\nexport default function* root() {\n  yield all([takeLatest(GET_DATA, getData)]);\n}\n","import {all, fork} from 'redux-saga/effects';\nimport autocomplete from './autocomplete';\n\n\nexport default function* root() {\n  yield all([\n    fork(autocomplete),\n  ]);\n}\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport HomePage from './pages/HomePage'\n\nimport configureStore from './store/configureStore'\nimport rootSaga from './sagas'\n\nconst store = configureStore()\nstore.runSaga(rootSaga)\n\n\nstore.subscribe(() => {\n  store.getState()\n})\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <HomePage />\n    </Provider>\n  );\n}\n\nexport default App;\n","import createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../redux/reducers\";\nimport { applyMiddleware, createStore } from \"redux\";\n\nexport default function configureStore(initialState) {\n  const sagaMiddleware = createSagaMiddleware();\n  return {\n    ...createStore(reducer, initialState, applyMiddleware(sagaMiddleware)),\n    runSaga: sagaMiddleware.run\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}